package demo

import (
	"bytes"
	"crypto/rand"
	"encoding/base64"
	"fmt"
	"image"
	"image/color"
	"image/png"
	"math/big"

	"github.com/maxence-charriere/go-app/v9/pkg/app"
	"github.com/mlctrez/goapp-mdc/pkg/imagelist"
)

type ImageListDemo struct {
	app.Compo
}

func (i *ImageListDemo) Render() app.UI {
	var content []app.UI

	items := imagelist.Items{}

	for i := 0; i < 30; i++ {

		n, err := rand.Int(rand.Reader, big.NewInt(int64(len(webSafeColors))))
		if err != nil {
			panic(err)
		}
		c := webSafeColors[n.Int64()]

		src := makeImage(c, 100, 100)

		items = append(items,
			&imagelist.Item{
				ImageContent: &imagelist.ImageAspectContainer{Image: app.Img().Src(src).Width(100).Height(100)},
				Supporting:   &imagelist.SupportingLabel{Text: fmt.Sprintf("rgb(%d,%d,%d)", c.R, c.G, c.B)},
			},
		)
	}

	content = append(content,
		&imagelist.ImageList{
			Class:      "standard-image-list",
			Protection: true,
			Masonry:    false,
			Items:      items,
		},
	)

	return PageBody(app.Div().Style("display", "inline").Style("width", "900px").Body(content...))
}

func makeImage(c color.Color, width, height int) string {
	rgba := image.NewRGBA(image.Rect(0, 0, width, height))

	for x := 0; x < width; x++ {
		for y := 0; y < height; y++ {
			rgba.Set(x, y, c)
		}
	}
	buf := bytes.NewBufferString("data:image/png;base64,")
	encoder := base64.NewEncoder(base64.StdEncoding, buf)
	_ = png.Encode(encoder, rgba)
	return buf.String()
}

var webSafeColors = []color.RGBA{
	{0, 0, 0, 255},
	{0, 0, 51, 255},
	{0, 0, 102, 255},
	{0, 0, 153, 255},
	{0, 0, 204, 255},
	{0, 0, 255, 255},
	{0, 51, 0, 255},
	{0, 51, 51, 255},
	{0, 51, 102, 255},
	{0, 51, 153, 255},
	{0, 51, 204, 255},
	{0, 51, 255, 255},
	{0, 102, 0, 255},
	{0, 102, 51, 255},
	{0, 102, 102, 255},
	{0, 102, 153, 255},
	{0, 102, 204, 255},
	{0, 102, 255, 255},
	{0, 153, 0, 255},
	{0, 153, 51, 255},
	{0, 153, 102, 255},
	{0, 153, 153, 255},
	{0, 153, 204, 255},
	{0, 153, 255, 255},
	{0, 204, 0, 255},
	{0, 204, 51, 255},
	{0, 204, 102, 255},
	{0, 204, 153, 255},
	{0, 204, 204, 255},
	{0, 204, 255, 255},
	{0, 255, 0, 255},
	{0, 255, 51, 255},
	{0, 255, 102, 255},
	{0, 255, 153, 255},
	{0, 255, 204, 255},
	{0, 255, 255, 255},
	{51, 0, 0, 255},
	{51, 0, 51, 255},
	{51, 0, 102, 255},
	{51, 0, 153, 255},
	{51, 0, 204, 255},
	{51, 0, 255, 255},
	{51, 51, 0, 255},
	{51, 51, 51, 255},
	{51, 51, 102, 255},
	{51, 51, 153, 255},
	{51, 51, 204, 255},
	{51, 51, 255, 255},
	{51, 102, 0, 255},
	{51, 102, 51, 255},
	{51, 102, 102, 255},
	{51, 102, 153, 255},
	{51, 102, 204, 255},
	{51, 102, 255, 255},
	{51, 153, 0, 255},
	{51, 153, 51, 255},
	{51, 153, 102, 255},
	{51, 153, 153, 255},
	{51, 153, 204, 255},
	{51, 153, 255, 255},
	{51, 204, 0, 255},
	{51, 204, 51, 255},
	{51, 204, 102, 255},
	{51, 204, 153, 255},
	{51, 204, 204, 255},
	{51, 204, 255, 255},
	{51, 255, 0, 255},
	{51, 255, 51, 255},
	{51, 255, 102, 255},
	{51, 255, 153, 255},
	{51, 255, 204, 255},
	{51, 255, 255, 255},
	{102, 0, 0, 255},
	{102, 0, 51, 255},
	{102, 0, 102, 255},
	{102, 0, 153, 255},
	{102, 0, 204, 255},
	{102, 0, 255, 255},
	{102, 51, 0, 255},
	{102, 51, 51, 255},
	{102, 51, 102, 255},
	{102, 51, 153, 255},
	{102, 51, 204, 255},
	{102, 51, 255, 255},
	{102, 102, 0, 255},
	{102, 102, 51, 255},
	{102, 102, 102, 255},
	{102, 102, 153, 255},
	{102, 102, 204, 255},
	{102, 102, 255, 255},
	{102, 153, 0, 255},
	{102, 153, 51, 255},
	{102, 153, 102, 255},
	{102, 153, 153, 255},
	{102, 153, 204, 255},
	{102, 153, 255, 255},
	{102, 204, 0, 255},
	{102, 204, 51, 255},
	{102, 204, 102, 255},
	{102, 204, 153, 255},
	{102, 204, 204, 255},
	{102, 204, 255, 255},
	{102, 255, 0, 255},
	{102, 255, 51, 255},
	{102, 255, 102, 255},
	{102, 255, 153, 255},
	{102, 255, 204, 255},
	{102, 255, 255, 255},
	{153, 0, 0, 255},
	{153, 0, 51, 255},
	{153, 0, 102, 255},
	{153, 0, 153, 255},
	{153, 0, 204, 255},
	{153, 0, 255, 255},
	{153, 51, 0, 255},
	{153, 51, 51, 255},
	{153, 51, 102, 255},
	{153, 51, 153, 255},
	{153, 51, 204, 255},
	{153, 51, 255, 255},
	{153, 102, 0, 255},
	{153, 102, 51, 255},
	{153, 102, 102, 255},
	{153, 102, 153, 255},
	{153, 102, 204, 255},
	{153, 102, 255, 255},
	{153, 153, 0, 255},
	{153, 153, 51, 255},
	{153, 153, 102, 255},
	{153, 153, 153, 255},
	{153, 153, 204, 255},
	{153, 153, 255, 255},
	{153, 204, 0, 255},
	{153, 204, 51, 255},
	{153, 204, 102, 255},
	{153, 204, 153, 255},
	{153, 204, 204, 255},
	{153, 204, 255, 255},
	{153, 255, 0, 255},
	{153, 255, 51, 255},
	{153, 255, 102, 255},
	{153, 255, 153, 255},
	{153, 255, 204, 255},
	{153, 255, 255, 255},
	{204, 0, 0, 255},
	{204, 0, 51, 255},
	{204, 0, 102, 255},
	{204, 0, 153, 255},
	{204, 0, 204, 255},
	{204, 0, 255, 255},
	{204, 51, 0, 255},
	{204, 51, 51, 255},
	{204, 51, 102, 255},
	{204, 51, 153, 255},
	{204, 51, 204, 255},
	{204, 51, 255, 255},
	{204, 102, 0, 255},
	{204, 102, 51, 255},
	{204, 102, 102, 255},
	{204, 102, 153, 255},
	{204, 102, 204, 255},
	{204, 102, 255, 255},
	{204, 153, 0, 255},
	{204, 153, 51, 255},
	{204, 153, 102, 255},
	{204, 153, 153, 255},
	{204, 153, 204, 255},
	{204, 153, 255, 255},
	{204, 204, 0, 255},
	{204, 204, 51, 255},
	{204, 204, 102, 255},
	{204, 204, 153, 255},
	{204, 204, 204, 255},
	{204, 204, 255, 255},
	{204, 255, 0, 255},
	{204, 255, 51, 255},
	{204, 255, 102, 255},
	{204, 255, 153, 255},
	{204, 255, 204, 255},
	{204, 255, 255, 255},
	{255, 0, 0, 255},
	{255, 0, 51, 255},
	{255, 0, 102, 255},
	{255, 0, 153, 255},
	{255, 0, 204, 255},
	{255, 0, 255, 255},
	{255, 51, 0, 255},
	{255, 51, 51, 255},
	{255, 51, 102, 255},
	{255, 51, 153, 255},
	{255, 51, 204, 255},
	{255, 51, 255, 255},
	{255, 102, 0, 255},
	{255, 102, 51, 255},
	{255, 102, 102, 255},
	{255, 102, 153, 255},
	{255, 102, 204, 255},
	{255, 102, 255, 255},
	{255, 153, 0, 255},
	{255, 153, 51, 255},
	{255, 153, 102, 255},
	{255, 153, 153, 255},
	{255, 153, 204, 255},
	{255, 153, 255, 255},
	{255, 204, 0, 255},
	{255, 204, 51, 255},
	{255, 204, 102, 255},
	{255, 204, 153, 255},
	{255, 204, 204, 255},
	{255, 204, 255, 255},
	{255, 255, 0, 255},
	{255, 255, 51, 255},
	{255, 255, 102, 255},
	{255, 255, 153, 255},
	{255, 255, 204, 255},
	{255, 255, 255, 255},
}
